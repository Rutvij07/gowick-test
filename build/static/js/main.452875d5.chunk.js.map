{"version":3,"sources":["logo.svg","components/Timer.js","components/Home.js","components/ReportCard.js","components/Quiz.js","components/Error404.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","useState","counter","setCounter","React","useEffect","timer","setInterval","onCounterZero","clearInterval","ques_id","className","cn","Home","quizList","setQuizList","fetch","process","mode","headers","then","res","a","json","data","Container","Spinner","animation","map","r","key","Jumbotron","name","Row","Col","xs","lg","description","to","Button","variant","ReportCard","report","score","questions","value","Card","ListGroup","ques","submitted_option","correct_option","Quiz","id","useParams","quiz","setQuiz","question","setQuestion","result","setResult","finalScore","setFinalScore","resultQuestion","length","method","body","JSON","stringify","v","filter","count","push","splice","Form","Group","options","split","Check","custom","label","type","onChange","e","target","Error404","App","path","exact","Boolean","window","location","hostname","match","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.452875d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\nimport cn from 'classnames'\n\nfunction Timer (props) {\n    const [counter,setCounter] = useState(15)\n    React.useEffect(() => {\n        const timer = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n        props.onCounterZero(counter)\n        return () => clearInterval(timer);\n      }, [counter]);\n\n    React.useEffect(() => {\n        setCounter(15)\n      }, [props.ques_id]);\n\n    return (\n        <div className='time-bar'>\n           <h5> Time Remaining <span className={cn(counter < 6 ? 'red-color':'')}> 00:{counter < 10 && 0}{counter}/00:15</span></h5>\n        </div>\n    )\n}\n\nexport default Timer;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner'\nimport {\n    Link,\n  } from \"react-router-dom\";\nimport Timer from './Timer';\n\nfunction Home () { // This component will call the list of the quiz\nconst [quizList,setQuizList] = useState(null)\n\n  useEffect(()=>{\n    fetch(`${process.env.REACT_APP_API_URL}/api/quiz/all`, { \n      mode:\"cors\",\n      headers: {\n        'auth-token': `19c4ff12-e027-4320-b844-2cda768714e8`,\n        'content-type': 'application/json',\n    }}).then(async ( res ) =>{\n      const data = await res.json()\n      setQuizList(data)\n      \n    })\n  },[])\n    return (\n        <Container>\n            <h2 className=\"header mt-5 mb-5\">\n                Welcome to CodeJudge            \n            </h2>\n        {!quizList && <Spinner animation=\"grow\" />}\n        {\n           quizList && quizList.map((r,key)=>{\n                return ( \n                    <Jumbotron key={r.name}>\n                        {/* <Timer/> */}\n                            <Row>\n                                <Col xs={12} lg={10}> \n                                <h3 className={`quiz-list-${key+1}`}>{r.name}</h3>\n                                <p>\n                                    {r.description}\n                                </p>\n                                </Col>\n                                <Col xs={12} lg={2}>\n                                <Link to={`/quiz/${key+1}`}>\n                                    <p>\n                                        <Button className={`start-quiz-${key+1}`} variant=\"success\">Start</Button>\n                                    </p>\n                                </Link>\n                                </Col>\n                            </Row>\n                    </Jumbotron>\n                )\n            })\n        }\n        </Container>\n    )\n}\n\nexport default Home;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Link } from \"react-router-dom\";\nimport cn from 'classnames'\n\nfunction ReportCard ({report}) { // This component will load the report which is final score of the quiz\n    return (\n        <Jumbotron className='text-left'>\n            <h1 className='score text-center'>Your score is {report.score}</h1>\n            <h5>Answers</h5>\n              {report.questions.map((value,key)=>{\n                  return(\n                    <Card className='mb-2' key={key}>  \n                        <ListGroup variant=\"flush p-3\">\n                                    <>\n                                    <div className={`question-${key+1}`}>\n                                        <h6>Question: {value.ques}</h6>\n                                    </div>\n                                    <div className={\n                                        cn(\n                                         `submitted-answer-${key+1}`,\n                                         value.submitted_option == value.correct_option ? 'green-color':'red-color'\n                                        )\n                                        }>\n                                        <h6>Your Answer: {value.submitted_option || 'Not attempted'}</h6>\n                                    </div>\n                                    <div className={`correct-answer-${key+1}`}>\n                                        <h6>Correct Answer: {value.correct_option}</h6>\n                                    </div>\n                                    </>\n                        </ListGroup>\n                    </Card>\n                  )\n                })}\n                <Link to={`/`}> \n                    <p className='mt-3'>\n                        <Button  variant=\"success\">Retake quiz</Button>\n                    </p>\n                </Link>\n            \n        </Jumbotron>\n    )\n}\n\nexport default ReportCard;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport FormCheck from 'react-bootstrap/FormCheck'\nimport Spinner from 'react-bootstrap/Spinner'\nimport {\n    useParams\n  } from \"react-router-dom\";\nimport Timer from './Timer';\nimport ReportCard from './ReportCard';\n\nfunction Quiz () { // This component will load the quiz question\nlet { id } = useParams();\nconst [quiz,setQuiz] = useState(null);\nconst [question,setQuestion] = useState(null);\nconst [result,setResult] = useState([]);\nconst [finalScore,setFinalScore] = useState(null);\nconst [map,setMap] = useState([]);\nconst [resultQuestion,setResultQuestion] = useState([]);\n\n\n  useEffect(()=>{   // Hook will called when component will mount\n    fetch(`${process.env.REACT_APP_API_URL}/api/quiz-questions/all/${id}`, { \n      mode:\"cors\",\n      headers: {\n        'auth-token': `19c4ff12-e027-4320-b844-2cda768714e8`,\n        'content-type': 'application/json',\n    }}).then(async ( res ) =>{\n      const data = await res.json()\n      setQuiz(data)\n      setQuestion(data.questions)\n    })\n},[])\n\nconst isQuizOver = question && question.length == 0 && result.length !=0 // condition for wheather quiz if finished\n\nif(isQuizOver){ \n    fetch(`${process.env.REACT_APP_API_URL}/api/user/quiz-score`, {  // this api will called when quiz is over\n        method:\"post\",\n        mode:\"cors\",\n        body:JSON.stringify(result),\n        headers: {\n          'auth-token': `19c4ff12-e027-4320-b844-2cda768714e8`,\n          'content-type': 'application/json',\n      }}).then(async ( res ) =>{\n        const data = await res.json()\n        data.questions.map(v=>{\n            const {ques} = resultQuestion.filter(r=> v.ques_id == r.ques_id)[0]\n            v.ques = ques\n        })\n        setFinalScore(data)\n        setResult([])\n      })\n    }\n\n    const onCounterZero = (count) => { // This function will check weather timer is 0 or not\n        if(count == 0){\n            resultQuestion.push({\n                \"ques_id\":  question[0].id,\n                \"ques\": question[0].name,\n            })\n            const data = question.splice(1)\n            setQuestion(data)\n        }\n    }\n\n    return (\n        <Container>\n            <h2 className=\"mt-5\">\n                {quiz && <Card body>{quiz.name}</Card> }\n            </h2>\n           { (!question ) && <Spinner animation=\"grow\" />}\n\n           {question && question.length !=0 && <Timer \n                ques_id = {question && question.length != 0 && question[0].id} \n                onCounterZero = {onCounterZero}\n            />}\n\n            {question && question.length != 0 && <Jumbotron className='text-left'>\n                <div className='question'>\n                  <h3> { question[0].name} </h3>\n                </div>\n                \n            <Form.Group>\n                {question[0].options.split(',').map((value,key) => (\n                        <div key={`custom-inline-${value}`} className=\"mb-3\">\n                            <Form.Check\n                                custom\n                                className={`answer-value-${key+1}`}\n                                label={value}\n                                value={value}\n                                name={\"radio\"}\n                                type=\"radio\"\n                                id={`${key+1}`}\n                                onChange={(e)=>{\n                                    if(e.target.value){\n                                        map.push({\n                                            \"ques_id\": question[0].id,\n                                            \"submitted_option\": e.target.value})\n                                            \n                                        resultQuestion.push({\n                                            \"ques_id\": question[0].id,\n                                            \"ques\":question[0].name,\n                                        })\n                                        const data = question.splice(1)\n                                        setQuestion(data)\n                                        setResult({\n                                            \"quiz_id\":id,\n                                            \"mappings\":map\n    \n                                        })\n                                    }\n                                }}\n                            />\n                        </div>\n                    ))}\n            </Form.Group>\n            </Jumbotron>\n            }\n            {finalScore && <ReportCard report={finalScore}/>}\n        </Container>\n    )\n}\n\nexport default Quiz;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Error404 () { // This compoent is called when there is unknown route\n    return (\n        <Container>\n            <h5 className=\"header mt-5\">\n               Seems you landed on wrong page\n            </h5>\n            <Link to={`/`}> \n            <p>\n                <Button  variant=\"success\">Home</Button>\n            </p>\n            </Link>\n        </Container>\n    )\n}\n\nexport default Error404;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Home from './components/Home';\nimport Quiz from './components/Quiz';\nimport Error404 from './components/Error404';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n            <Route path={`/quiz/:id`} exact>\n              <Quiz/>\n            </Route>\n            <Route path=\"/\" exact>\n              <Home/>\n            </Route>\n            <Route path=\"*\">\n              <Error404/>\n            </Route>\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// BACKEND ENDPOINT BASE URL\nconsole.log(process.env.REACT_APP_API_URL);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}